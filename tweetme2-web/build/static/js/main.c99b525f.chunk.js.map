{"version":3,"sources":["logo.svg","lookup/components.js","tweets/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","lookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","response","status","onerror","e","console","log","send","TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","newValue","current","value","tempNewTweets","unshift","alert","content","ref","required","type","TweetList","ActionBtn","tweet","action","likes","setLikes","userLike","setUserLike","actionDisplay","display","onClick","Tweet","id","tweetsInit","setTweetsInit","tweets","setTweets","tweetsDidSet","setTweetsDidSet","useEffect","final","concat","map","item","index","key","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","appEl","getElementById","ReactDOM","render","tweetsEl","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c99b525f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function getCookie(name) {\n  var cookieValue = null;\n  if (document.cookie && document.cookie !== '') {\n      var cookies = document.cookie.split(';');\n      for (var i = 0; i < cookies.length; i++) {\n          var cookie = cookies[i].trim();\n          // Does this cookie string begin with the name we want?\n          if (cookie.substring(0, name.length + 1) === (name + '=')) {\n              cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n              break;\n          }\n      }\n  }\n  return cookieValue;\n}\n\nfunction lookup(method, endpoint, callback, data){\n  let jsonData;\n  if (data) {\n    jsonData = JSON.stringify(data)\n  }\n  const xhr = new XMLHttpRequest()\n  const url = `http://localhost:8000/api${endpoint}/`\n  xhr.responseType = \"json\"\n  const csrftoken = getCookie('csrftoken')\n  xhr.open(method, url)\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\")\n  \n  if (csrftoken) {\n    xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\",\"XMLHttpRequest\")\n    xhr.setRequestHeader(\"X-Requested-With\",\"XMLHttpRequest\")\n    xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)}\n  xhr.onload = function() {\n    callback(xhr.response, xhr.status) \n  }\n  xhr.onerror = function(e) {\n    console.log(e)\n    callback({'message':'There is an error'}, 400)\n  }\n  xhr.send(jsonData)\n\n}\n\nexport function createTweet(newTweet, callback) {\n  lookup(\"POST\", \"/tweets/create\", callback, {content: newTweet})\n}\n\nexport function loadTweets(callback) {\n  lookup(\"GET\", \"/tweets\", callback)  \n}\n","import React, {useEffect, useState}  from 'react'\n\nimport {loadTweets, createTweet} from '../lookup'\n\n\nexport function TweetsComponent(props) {\n    const textAreaRef = React.createRef()\n    const [newTweets, setNewTweets] = useState([])\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        const newValue=textAreaRef.current.value\n        const tempNewTweets = [...newTweets]\n        // change this to server call\n        createTweet(newValue,(response,status) => {\n            if (status ===201) {\n                tempNewTweets.unshift(response)\n            }else {\n                console.log(response)\n                alert('There was an error. Please try again')\n            }\n        })\n        \n        setNewTweets(tempNewTweets)\n        textAreaRef.current.value = ''\n    }\n    return <div className={props.className}>\n        <div className='col-12 mb-3'>\n            <form onSubmit={handleSubmit}>        \n                <textarea ref={textAreaRef} required={true} className='form-control' name = 'tweet'>\n\n                </textarea>\n                <button type='submit' className='btn btn-primary my-3'>Tweet</button>\n            </form>\n        </div>\n        <TweetList newTweets={newTweets}/>\n    </div>\n    \n}\n\nexport function ActionBtn(props) {\n    const {tweet, action} = props\n    const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0)\n    const [userLike, setUserLike] = useState(tweet.likes ===true ? true : false)\n    const className = props.className ? props.className:'btn btn-primary btn-sm'\n    const actionDisplay = action.display? action.display : 'Action'\n    const handleClick = (event) =>{\n        event.preventDefault()\n        if (action.type === 'like'){\n            if (userLike ===true) {\n                // perhaps I unlike it\n                setLikes(likes -1)\n                setUserLike(false)\n            } else {\n                setLikes(likes + 1)\n                setUserLike(true)\n            }\n        }\n    }\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\n    \n    return <button className={className} onClick={handleClick}>{display}</button>\n}\n  \nexport  function Tweet(props) {\n    const {tweet} = props\n    const className = props.className ? props.className:'col-10 mx-auto col-md-6'\n    return <div className={className}>\n      <p>{tweet.id} - {tweet.content}</p>\n      <div className='btn btn-group'>\n        <ActionBtn tweet={tweet} action={{type:'like', display:'Likes'}}/>\n        <ActionBtn tweet={tweet} action={{type:'unlike', display:'Unlike'}}/>\n        <ActionBtn tweet={tweet} action={{type:'retweet', display:'ReTweet'}}/>\n      </div>\n    </div>\n}\n  \nexport function TweetList(props) {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    const [tweetsDidSet, setTweetsDidSet] = useState(false)\n    useEffect(() => {\n        let final = [...props.newTweets].concat(tweetsInit)\n        if (final.length !== tweets.length){\n            setTweets(final)\n        }\n    },[props.newTweets, tweets, tweetsInit])\n\n    useEffect(() => {\n        if (tweetsDidSet === false) {\n            const myCallback = (response, status) => {\n                if (status ===200) {\n                    setTweetsInit(response)\n                    setTweetsDidSet(true)\n                } else {\n                    alert('There was an error!')\n                }\n            }\n            loadTweets(myCallback)\n        }\n    }, [tweetsInit, tweetsDidSet, setTweetsDidSet])\n    return tweets.map((item, index)=>{\n      return <Tweet tweet={item} className='my-5 py-5 border bg-white text-dark' key={`${index}-{item.id}`}/>\n    })\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetsComponent} from './tweets'\n\n\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetsComponent} from './tweets'\nimport * as serviceWorker from './serviceWorker';\n\n\nconst appEl = document.getElementById('root')\nif (appEl) {\n  ReactDOM.render(<App />, appEl);\n}\n\nconst tweetsEl = document.getElementById('tweetme-2')\nif (tweetsEl) {\n  ReactDOM.render(<TweetsComponent />, tweetsEl);\n}\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
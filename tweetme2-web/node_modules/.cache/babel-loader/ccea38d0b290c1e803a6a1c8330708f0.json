{"ast":null,"code":"function getCookie(name) {\n  var cookieValue = null;\n\n  if (document.cookie && document.cookie !== '') {\n    var cookies = document.cookie.split(';');\n\n    for (var i = 0; i < cookies.length; i++) {\n      var cookie = cookies[i].trim(); // Does this cookie string begin with the name we want?\n\n      if (cookie.substring(0, name.length + 1) === name + '=') {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n\n  return cookieValue;\n}\n\nfunction lookup(method, endpoint, callback, data) {\n  let jsonData;\n\n  if (data) {\n    jsonData = JSON.stringify(data);\n  }\n\n  const xhr = new XMLHttpRequest();\n  const url = `http://localhost:8000/api${endpoint}/`;\n  xhr.responseType = \"json\";\n  const csrftoken = getCookie('csrftoken');\n  xhr.open(method, url);\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n  if (csrftoken) {\n    xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\");\n    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n    xhr.setRequestHeader(\"X-CSRFToken\", csrftoken);\n  }\n\n  xhr.onload = function () {\n    callback(xhr.response, xhr.status);\n  };\n\n  xhr.onerror = function (e) {\n    console.log(e);\n    callback({\n      'message': 'There is an error'\n    }, 400);\n  };\n\n  xhr.send(jsonData);\n}\n\nexport function createTweet(newTweet, callback) {\n  lookup(\"POST\", \"/tweets/create\", callback, {\n    content: newTweet\n  });\n}\nexport function loadTweets(callback) {\n  lookup(\"GET\", \"/tweets\", callback);\n}","map":{"version":3,"sources":["/Users/administrator/Desktop/Development-Projects/CodeEntrepreneurs/FollowCoding/tweetme2/tweetme2-web/src/lookup/components.js"],"names":["getCookie","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","lookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","open","setRequestHeader","onload","response","status","onerror","e","console","log","send","createTweet","newTweet","content","loadTweets"],"mappings":"AAAA,SAASA,SAAT,CAAmBC,IAAnB,EAAyB;AACvB,MAAIC,WAAW,GAAG,IAAlB;;AACA,MAAIC,QAAQ,CAACC,MAAT,IAAmBD,QAAQ,CAACC,MAAT,KAAoB,EAA3C,EAA+C;AAC3C,QAAIC,OAAO,GAAGF,QAAQ,CAACC,MAAT,CAAgBE,KAAhB,CAAsB,GAAtB,CAAd;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrC,UAAIH,MAAM,GAAGC,OAAO,CAACE,CAAD,CAAP,CAAWE,IAAX,EAAb,CADqC,CAErC;;AACA,UAAIL,MAAM,CAACM,SAAP,CAAiB,CAAjB,EAAoBT,IAAI,CAACO,MAAL,GAAc,CAAlC,MAA0CP,IAAI,GAAG,GAArD,EAA2D;AACvDC,QAAAA,WAAW,GAAGS,kBAAkB,CAACP,MAAM,CAACM,SAAP,CAAiBT,IAAI,CAACO,MAAL,GAAc,CAA/B,CAAD,CAAhC;AACA;AACH;AACJ;AACJ;;AACD,SAAON,WAAP;AACD;;AAED,SAASU,MAAT,CAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,QAAlC,EAA4CC,IAA5C,EAAiD;AAC/C,MAAIC,QAAJ;;AACA,MAAID,IAAJ,EAAU;AACRC,IAAAA,QAAQ,GAAGC,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAX;AACD;;AACD,QAAMI,GAAG,GAAG,IAAIC,cAAJ,EAAZ;AACA,QAAMC,GAAG,GAAI,4BAA2BR,QAAS,GAAjD;AACAM,EAAAA,GAAG,CAACG,YAAJ,GAAmB,MAAnB;AACA,QAAMC,SAAS,GAAGxB,SAAS,CAAC,WAAD,CAA3B;AACAoB,EAAAA,GAAG,CAACK,IAAJ,CAASZ,MAAT,EAAiBS,GAAjB;AACAF,EAAAA,GAAG,CAACM,gBAAJ,CAAqB,cAArB,EAAqC,kBAArC;;AAEA,MAAIF,SAAJ,EAAe;AACbJ,IAAAA,GAAG,CAACM,gBAAJ,CAAqB,uBAArB,EAA6C,gBAA7C;AACAN,IAAAA,GAAG,CAACM,gBAAJ,CAAqB,kBAArB,EAAwC,gBAAxC;AACAN,IAAAA,GAAG,CAACM,gBAAJ,CAAqB,aAArB,EAAoCF,SAApC;AAA+C;;AACjDJ,EAAAA,GAAG,CAACO,MAAJ,GAAa,YAAW;AACtBZ,IAAAA,QAAQ,CAACK,GAAG,CAACQ,QAAL,EAAeR,GAAG,CAACS,MAAnB,CAAR;AACD,GAFD;;AAGAT,EAAAA,GAAG,CAACU,OAAJ,GAAc,UAASC,CAAT,EAAY;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACAhB,IAAAA,QAAQ,CAAC;AAAC,iBAAU;AAAX,KAAD,EAAkC,GAAlC,CAAR;AACD,GAHD;;AAIAK,EAAAA,GAAG,CAACc,IAAJ,CAASjB,QAAT;AAED;;AAED,OAAO,SAASkB,WAAT,CAAqBC,QAArB,EAA+BrB,QAA/B,EAAyC;AAC9CH,EAAAA,MAAM,CAAC,MAAD,EAAS,gBAAT,EAA2BG,QAA3B,EAAqC;AAACsB,IAAAA,OAAO,EAAED;AAAV,GAArC,CAAN;AACD;AAED,OAAO,SAASE,UAAT,CAAoBvB,QAApB,EAA8B;AACnCH,EAAAA,MAAM,CAAC,KAAD,EAAQ,SAAR,EAAmBG,QAAnB,CAAN;AACD","sourcesContent":["function getCookie(name) {\n  var cookieValue = null;\n  if (document.cookie && document.cookie !== '') {\n      var cookies = document.cookie.split(';');\n      for (var i = 0; i < cookies.length; i++) {\n          var cookie = cookies[i].trim();\n          // Does this cookie string begin with the name we want?\n          if (cookie.substring(0, name.length + 1) === (name + '=')) {\n              cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n              break;\n          }\n      }\n  }\n  return cookieValue;\n}\n\nfunction lookup(method, endpoint, callback, data){\n  let jsonData;\n  if (data) {\n    jsonData = JSON.stringify(data)\n  }\n  const xhr = new XMLHttpRequest()\n  const url = `http://localhost:8000/api${endpoint}/`\n  xhr.responseType = \"json\"\n  const csrftoken = getCookie('csrftoken')\n  xhr.open(method, url)\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\")\n  \n  if (csrftoken) {\n    xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\",\"XMLHttpRequest\")\n    xhr.setRequestHeader(\"X-Requested-With\",\"XMLHttpRequest\")\n    xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)}\n  xhr.onload = function() {\n    callback(xhr.response, xhr.status) \n  }\n  xhr.onerror = function(e) {\n    console.log(e)\n    callback({'message':'There is an error'}, 400)\n  }\n  xhr.send(jsonData)\n\n}\n\nexport function createTweet(newTweet, callback) {\n  lookup(\"POST\", \"/tweets/create\", callback, {content: newTweet})\n}\n\nexport function loadTweets(callback) {\n  lookup(\"GET\", \"/tweets\", callback)  \n}\n"]},"metadata":{},"sourceType":"module"}
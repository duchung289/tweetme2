{"ast":null,"code":"var _jsxFileName = \"/Users/administrator/Desktop/Development-Projects/CodeEntrepreneurs/FollowCoding/tweetme2/tweetme2-web/src/tweets/list.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Tweet } from './detail';\nimport { apiTweetList } from './lookup';\nexport function TweetList(props) {\n  const [tweetsInit, setTweetsInit] = useState([]);\n  const [tweets, setTweets] = useState([]);\n  const [tweetsDidSet, setTweetsDidSet] = useState(true);\n  useEffect(() => {\n    const final = [...props.newTweets].concat(tweetsInit);\n\n    if (final.length !== tweets.length) {\n      setTweets(final);\n    }\n  }, [props.newTweets, tweets, tweetsInit]);\n  useEffect(() => {\n    if (tweetsDidSet === true) {\n      const handleTweetListLookup = (response, status) => {\n        if (status === 200) {\n          setTweetsInit(response);\n          setTweetsDidSet(false);\n        } else {\n          alert('There was an error!');\n        }\n      };\n\n      apiTweetList(props.username, handleTweetListLookup);\n    }\n  }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username]);\n\n  const handleDidRetweet = newTweet => {\n    const updateTweetsInit = [...tweetsInit];\n    updateTweetsInit.unshift(newTweet);\n    setTweetsInit(updateTweetsInit);\n    const updateFinalTweets = [...tweets];\n    updateFinalTweets.unshift(tweets);\n    setTweets(updateFinalTweets);\n  };\n\n  return tweets.map((item, index) => {\n    return /*#__PURE__*/React.createElement(Tweet, {\n      tweet: item,\n      didRetweet: handleDidRetweet,\n      className: \"my-5 py-5 border bg-white text-dark\",\n      key: `${index}-{item.id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 16\n      }\n    });\n  });\n}","map":{"version":3,"sources":["/Users/administrator/Desktop/Development-Projects/CodeEntrepreneurs/FollowCoding/tweetme2/tweetme2-web/src/tweets/list.js"],"names":["React","useEffect","useState","Tweet","apiTweetList","TweetList","props","tweetsInit","setTweetsInit","tweets","setTweets","tweetsDidSet","setTweetsDidSet","final","newTweets","concat","length","handleTweetListLookup","response","status","alert","username","handleDidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","map","item","index"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,SAAQC,KAAR,QAAoB,UAApB;AACA,SAAQC,YAAR,QAA4B,UAA5B;AAEA,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAC7B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACO,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACS,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAAC,IAAD,CAAhD;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMY,KAAK,GAAG,CAAC,GAAGP,KAAK,CAACQ,SAAV,EAAqBC,MAArB,CAA4BR,UAA5B,CAAd;;AACA,QAAIM,KAAK,CAACG,MAAN,KAAiBP,MAAM,CAACO,MAA5B,EAAmC;AAC/BN,MAAAA,SAAS,CAACG,KAAD,CAAT;AACH;AACJ,GALQ,EAKP,CAACP,KAAK,CAACQ,SAAP,EAAkBL,MAAlB,EAA0BF,UAA1B,CALO,CAAT;AAOAN,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIU,YAAY,KAAK,IAArB,EAA2B;AACvB,YAAMM,qBAAqB,GAAG,CAACC,QAAD,EAAWC,MAAX,KAAsB;AAChD,YAAIA,MAAM,KAAK,GAAf,EAAoB;AAChBX,UAAAA,aAAa,CAACU,QAAD,CAAb;AACAN,UAAAA,eAAe,CAAC,KAAD,CAAf;AACH,SAHD,MAGO;AACHQ,UAAAA,KAAK,CAAC,qBAAD,CAAL;AACH;AACJ,OAPD;;AAQAhB,MAAAA,YAAY,CAACE,KAAK,CAACe,QAAP,EAAiBJ,qBAAjB,CAAZ;AACH;AACJ,GAZQ,EAYN,CAACV,UAAD,EAAaI,YAAb,EAA2BC,eAA3B,EAA4CN,KAAK,CAACe,QAAlD,CAZM,CAAT;;AAcA,QAAMC,gBAAgB,GAAIC,QAAD,IAAc;AACnC,UAAMC,gBAAgB,GAAG,CAAC,GAAGjB,UAAJ,CAAzB;AACAiB,IAAAA,gBAAgB,CAACC,OAAjB,CAAyBF,QAAzB;AACAf,IAAAA,aAAa,CAACgB,gBAAD,CAAb;AACA,UAAME,iBAAiB,GAAG,CAAC,GAAGjB,MAAJ,CAA1B;AACAiB,IAAAA,iBAAiB,CAACD,OAAlB,CAA0BhB,MAA1B;AACAC,IAAAA,SAAS,CAACgB,iBAAD,CAAT;AACH,GAPD;;AAQA,SAAOjB,MAAM,CAACkB,GAAP,CAAW,CAACC,IAAD,EAAOC,KAAP,KAAe;AAC7B,wBAAO,oBAAC,KAAD;AACP,MAAA,KAAK,EAAED,IADA;AAEP,MAAA,UAAU,EAAIN,gBAFP;AAGP,MAAA,SAAS,EAAC,qCAHH;AAIP,MAAA,GAAG,EAAG,GAAEO,KAAM,YAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAKH,GANM,CAAP;AAOH","sourcesContent":["import React, {useEffect, useState}  from 'react'\nimport {Tweet} from './detail'\nimport {apiTweetList } from './lookup'\n\nexport function TweetList(props) {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    const [tweetsDidSet, setTweetsDidSet] = useState(true)\n    useEffect(() => {\n        const final = [...props.newTweets].concat(tweetsInit)\n        if (final.length !== tweets.length){\n            setTweets(final)\n        }\n    },[props.newTweets, tweets, tweetsInit])\n\n    useEffect(() => {\n        if (tweetsDidSet === true) {\n            const handleTweetListLookup = (response, status) => {\n                if (status === 200) {\n                    setTweetsInit(response)\n                    setTweetsDidSet(false)\n                } else {\n                    alert('There was an error!')\n                }\n            }\n            apiTweetList(props.username, handleTweetListLookup)\n        }\n    }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username])\n    \n    const handleDidRetweet = (newTweet) => {\n        const updateTweetsInit = [...tweetsInit]\n        updateTweetsInit.unshift(newTweet)\n        setTweetsInit(updateTweetsInit)\n        const updateFinalTweets = [...tweets]\n        updateFinalTweets.unshift(tweets)\n        setTweets(updateFinalTweets)\n    }\n    return tweets.map((item, index)=>{\n        return <Tweet \n        tweet={item} \n        didRetweet = {handleDidRetweet}\n        className='my-5 py-5 border bg-white text-dark' \n        key={`${index}-{item.id}`}/>\n    })\n}\n"]},"metadata":{},"sourceType":"module"}
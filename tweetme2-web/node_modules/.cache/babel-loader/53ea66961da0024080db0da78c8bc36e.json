{"ast":null,"code":"var _jsxFileName = \"/Users/administrator/Desktop/Development-Projects/CodeEntrepreneurs/FollowCoding/tweetme2/tweetme2-web/src/tweets/feed.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Tweet } from './detail';\nimport { apiTweetFeed } from './lookup';\nexport function FeedList(props) {\n  const [tweetsInit, setTweetsInit] = useState([]);\n  const [tweets, setTweets] = useState([]);\n  const [nextUrl, setNextUrl] = useState([null]);\n  const [tweetsDidSet, setTweetsDidSet] = useState(false);\n  useEffect(() => {\n    const final = [...props.newTweets].concat(tweetsInit);\n\n    if (final.length !== tweets.length) {\n      setTweets(final);\n    }\n  }, [props.newTweets, tweets, tweetsInit]);\n  useEffect(() => {\n    if (tweetsDidSet === false) {\n      const handleTweetListLookup = (response, status) => {\n        if (status === 200) {\n          setNextUrl(response.next);\n          setTweetsInit(response.results);\n          setTweetsDidSet(true);\n        } else {\n          alert('There was an error!');\n        }\n      };\n\n      apiTweetFeed(handleTweetListLookup);\n    }\n  }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username]);\n\n  const handleDidRetweet = newTweet => {\n    const updateTweetsInit = [...tweetsInit];\n    updateTweetsInit.unshift(newTweet);\n    setTweetsInit(updateTweetsInit);\n    const updateFinalTweets = [...tweets];\n    updateFinalTweets.unshift(tweets);\n    setTweets(updateFinalTweets);\n  };\n\n  const handleLoadNext = event => {\n    event.preventDefault();\n\n    if (nextUrl !== null) {\n      const handleLoadNextResponse = (response, status) => {\n        if (status === 200) {\n          setNextUrl(response.next);\n          const newTweets = [...tweets].concat(response.results);\n          setTweetsInit(newTweets);\n          setTweets(newTweets);\n        } else {\n          alert('There was an error!');\n        }\n      };\n\n      apiTweetFeed(handleLoadNextResponse, nextUrl);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 12\n    }\n  }, tweets.map((item, index) => {\n    return /*#__PURE__*/React.createElement(Tweet, {\n      tweet: item,\n      didRetweet: handleDidRetweet,\n      className: \"my-5 py-5 border bg-white text-dark\",\n      key: `${index}-{item.id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 16\n      }\n    });\n  }), nextUrl !== null && /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleLoadNext,\n    className: \"btn btn-outline-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 25\n    }\n  }, \"Load next\"));\n}","map":{"version":3,"sources":["/Users/administrator/Desktop/Development-Projects/CodeEntrepreneurs/FollowCoding/tweetme2/tweetme2-web/src/tweets/feed.js"],"names":["React","useEffect","useState","Tweet","apiTweetFeed","FeedList","props","tweetsInit","setTweetsInit","tweets","setTweets","nextUrl","setNextUrl","tweetsDidSet","setTweetsDidSet","final","newTweets","concat","length","handleTweetListLookup","response","status","next","results","alert","username","handleDidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","handleLoadNext","event","preventDefault","handleLoadNextResponse","map","item","index"],"mappings":"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","sourcesContent":["import React, {useEffect, useState}  from 'react'\nimport {Tweet} from './detail'\nimport {apiTweetFeed} from './lookup'\n\nexport function FeedList(props) {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    const [nextUrl, setNextUrl] = useState([null])\n    const [tweetsDidSet, setTweetsDidSet] = useState(false)\n    useEffect(() => {\n        const final = [...props.newTweets].concat(tweetsInit)\n        if (final.length !== tweets.length){\n            setTweets(final)\n        }\n    },[props.newTweets, tweets, tweetsInit])\n\n    useEffect(() => {\n        if (tweetsDidSet === false) {\n            const handleTweetListLookup = (response, status) => {\n                if (status === 200) {\n                    setNextUrl(response.next)\n                    setTweetsInit(response.results)\n                    setTweetsDidSet(true)\n                } else {\n                    alert('There was an error!')\n                }\n            }\n            apiTweetFeed(handleTweetListLookup)\n        }\n    }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username])\n    \n    const handleDidRetweet = (newTweet) => {\n        const updateTweetsInit = [...tweetsInit]\n        updateTweetsInit.unshift(newTweet)\n        setTweetsInit(updateTweetsInit)\n        const updateFinalTweets = [...tweets]\n        updateFinalTweets.unshift(tweets)\n        setTweets(updateFinalTweets)\n    }\n\n    const handleLoadNext = (event   ) => {\n        event.preventDefault()\n        if (nextUrl !== null){\n            const handleLoadNextResponse = (response, status) => {\n                if (status === 200) {\n                    setNextUrl(response.next)\n                    const newTweets = [...tweets].concat(response.results)\n                    setTweetsInit(newTweets)\n                    setTweets(newTweets)\n                } else {\n                    alert('There was an error!')\n                }\n            }\n            apiTweetFeed(handleLoadNextResponse, nextUrl)\n        }\n    }\n\n    return <React.Fragment>{tweets.map((item, index)=>{\n        return <Tweet \n        tweet={item} \n        didRetweet = {handleDidRetweet}\n        className='my-5 py-5 border bg-white text-dark' \n        key={`${index}-{item.id}`}/>\n    })}\n    {nextUrl!== null && <button onClick={handleLoadNext} className='btn btn-outline-primary'>Load next</button>}\n    </React.Fragment>\n}\n"]},"metadata":{},"sourceType":"module"}